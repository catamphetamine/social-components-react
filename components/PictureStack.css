.PictureStack {
	--PictureStack-borderWidth: 1px;
	--PictureStack-borderColor: var(--SocialComponents-color-400);
	--PictureStack-backgroundColor: var(--SocialComponents-backgroundColor);
	/* Makes non-stacked picture have the same border color as stacked ones. */
	/*--Picture-borderColor: var(--PictureStack-borderColor);*/
	display: block;
	position: relative;
}

.PictureStack--inline {
	/* Sometimes it can't be `display: block`, for example,
	   because it's inside a `<p/>` or a `<button/>`. */
	display: inline-block;
}

.PictureStack--stack {
  --Picture-borderColor: var(--PictureStack-borderColor);
  --Picture-borderColor--focus: var(--PictureStack-borderColor);
	/* Stacked pictures border is re-drawn as a child element. */
	/*--Picture-borderColor: transparent;*/
	/* Show stacked pictures underneath. */
  overflow: visible;
}

.PictureStackBorder,
.PictureStackUnder {
	/* Sometimes it can't be `display: block`, for example,
	   because it's inside a `<p/>` or a `<button/>`. */
	display: inline-block;
	position: absolute;
	/*width: calc(100% + 2 * 1px);*/
	/*height: calc(100% + 2 * 1px);*/
	width: 100%;
	height: 100%;
	border: var(--PictureStack-borderWidth) solid var(--PictureStack-borderColor);
	background-color: var(--PictureStack-backgroundColor);
}

.PictureStackBorder {
	left: calc(-1 * var(--PictureStack-borderWidth));
	top: calc(-1 * var(--PictureStack-borderWidth));
	border: var(--PictureStack-borderWidth) solid var(--PictureStack-borderColor);
}

.PictureStackUnder--2-of-2 {
	left: calc(-1 * (var(--PictureStack-borderWidth) + 2px));
	top: calc(var(--PictureStack-borderWidth) + 2px);
}

.PictureStackUnder--2-of-3 {
	left: calc(-1 * (var(--PictureStack-borderWidth) + 1px));
	top: calc(var(--PictureStack-borderWidth) + 1px);
}

.PictureStackUnder--3-of-3 {
	left: calc(-1 * (var(--PictureStack-borderWidth) + 1px + var(--PictureStack-borderWidth) + 1px));
	top: calc(var(--PictureStack-borderWidth) + 1px + var(--PictureStack-borderWidth) + 1px);
}